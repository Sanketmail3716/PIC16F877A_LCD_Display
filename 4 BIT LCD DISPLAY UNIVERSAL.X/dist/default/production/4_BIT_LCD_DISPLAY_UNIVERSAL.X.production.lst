

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Jun 21 12:22:50 2023

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	dabs	1,0x7E,2
    14  0000                     
    15                           ; Version 2.10
    16                           ; Generated 31/07/2019 GMT
    17                           ; 
    18                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC16F877A Definitions
    47                           ; 
    48                           ; SFR Addresses
    49  0000                     	;# 
    50  0001                     	;# 
    51  0002                     	;# 
    52  0003                     	;# 
    53  0004                     	;# 
    54  0005                     	;# 
    55  0006                     	;# 
    56  0007                     	;# 
    57  0008                     	;# 
    58  0009                     	;# 
    59  000A                     	;# 
    60  000B                     	;# 
    61  000C                     	;# 
    62  000D                     	;# 
    63  000E                     	;# 
    64  000E                     	;# 
    65  000F                     	;# 
    66  0010                     	;# 
    67  0011                     	;# 
    68  0012                     	;# 
    69  0013                     	;# 
    70  0014                     	;# 
    71  0015                     	;# 
    72  0015                     	;# 
    73  0016                     	;# 
    74  0017                     	;# 
    75  0018                     	;# 
    76  0019                     	;# 
    77  001A                     	;# 
    78  001B                     	;# 
    79  001B                     	;# 
    80  001C                     	;# 
    81  001D                     	;# 
    82  001E                     	;# 
    83  001F                     	;# 
    84  0081                     	;# 
    85  0085                     	;# 
    86  0086                     	;# 
    87  0087                     	;# 
    88  0088                     	;# 
    89  0089                     	;# 
    90  008C                     	;# 
    91  008D                     	;# 
    92  008E                     	;# 
    93  0091                     	;# 
    94  0092                     	;# 
    95  0093                     	;# 
    96  0094                     	;# 
    97  0098                     	;# 
    98  0099                     	;# 
    99  009C                     	;# 
   100  009D                     	;# 
   101  009E                     	;# 
   102  009F                     	;# 
   103  010C                     	;# 
   104  010D                     	;# 
   105  010E                     	;# 
   106  010F                     	;# 
   107  018C                     	;# 
   108  018D                     	;# 
   109  0000                     	;# 
   110  0001                     	;# 
   111  0002                     	;# 
   112  0003                     	;# 
   113  0004                     	;# 
   114  0005                     	;# 
   115  0006                     	;# 
   116  0007                     	;# 
   117  0008                     	;# 
   118  0009                     	;# 
   119  000A                     	;# 
   120  000B                     	;# 
   121  000C                     	;# 
   122  000D                     	;# 
   123  000E                     	;# 
   124  000E                     	;# 
   125  000F                     	;# 
   126  0010                     	;# 
   127  0011                     	;# 
   128  0012                     	;# 
   129  0013                     	;# 
   130  0014                     	;# 
   131  0015                     	;# 
   132  0015                     	;# 
   133  0016                     	;# 
   134  0017                     	;# 
   135  0018                     	;# 
   136  0019                     	;# 
   137  001A                     	;# 
   138  001B                     	;# 
   139  001B                     	;# 
   140  001C                     	;# 
   141  001D                     	;# 
   142  001E                     	;# 
   143  001F                     	;# 
   144  0081                     	;# 
   145  0085                     	;# 
   146  0086                     	;# 
   147  0087                     	;# 
   148  0088                     	;# 
   149  0089                     	;# 
   150  008C                     	;# 
   151  008D                     	;# 
   152  008E                     	;# 
   153  0091                     	;# 
   154  0092                     	;# 
   155  0093                     	;# 
   156  0094                     	;# 
   157  0098                     	;# 
   158  0099                     	;# 
   159  009C                     	;# 
   160  009D                     	;# 
   161  009E                     	;# 
   162  009F                     	;# 
   163  010C                     	;# 
   164  010D                     	;# 
   165  010E                     	;# 
   166  010F                     	;# 
   167  018C                     	;# 
   168  018D                     	;# 
   169  0008                     _PORTD	set	8
   170  0039                     _RC1	set	57
   171  0038                     _RC0	set	56
   172  0088                     _TRISD	set	136
   173  0439                     _TRISC1	set	1081
   174  0438                     _TRISC0	set	1080
   175                           
   176                           	psect	strings
   177  0003                     __pstrings:	
   178  0003                     stringtab:	
   179  0003                     __stringtab:	
   180  0003                     stringcode:	
   181                           ;	String table - string pointers are 1 byte each
   182                           
   183  0003                     stringdir:	
   184  0003  3000               	movlw	high stringdir
   185  0004  008A               	movwf	10
   186  0005  0804               	movf	4,w
   187  0006  0A84               	incf	4,f
   188  0007  0782               	addwf	2,f
   189  0008                     __stringbase:	
   190  0008  3400               	retlw	0
   191  0009                     __end_of__stringtab:	
   192  0009                     STR_2:	
   193  0009  3442               	retlw	66	;'B'
   194  000A  3441               	retlw	65	;'A'
   195  000B  3448               	retlw	72	;'H'
   196  000C  3455               	retlw	85	;'U'
   197  000D  344C               	retlw	76	;'L'
   198  000E  3445               	retlw	69	;'E'
   199  000F  344B               	retlw	75	;'K'
   200  0010  3441               	retlw	65	;'A'
   201  0011  3452               	retlw	82	;'R'
   202  0012  3400               	retlw	0
   203  0013                     STR_1:	
   204  0013  3450               	retlw	80	;'P'
   205  0014  3441               	retlw	65	;'A'
   206  0015  344C               	retlw	76	;'L'
   207  0016  344C               	retlw	76	;'L'
   208  0017  3441               	retlw	65	;'A'
   209  0018  3456               	retlw	86	;'V'
   210  0019  3449               	retlw	73	;'I'
   211  001A  3400               	retlw	0
   212                           
   213                           ; #config settings
   214  0000                     
   215                           	psect	cinit
   216  07FC                     start_initialization:	
   217  07FC                     __initialization:	
   218  07FC                     end_of_initialization:	
   219                           ;End of C runtime variable initialization code
   220                           
   221  07FC                     __end_of__initialization:	
   222  07FC  0183               	clrf	3
   223  07FD  120A  118A  2F10   	ljmp	_main	;jump to C main() function
   224                           
   225                           	psect	cstackCOMMON
   226  0070                     __pcstackCOMMON:	
   227  0070                     ?_LCD_Init:	
   228  0070                     ?_command:	
   229                           ; 1 bytes @ 0x0
   230                           
   231  0070                     ?_LCD_string:	
   232                           ; 1 bytes @ 0x0
   233                           
   234  0070                     ?_main:	
   235                           ; 1 bytes @ 0x0
   236                           
   237  0070                     ?_bit_sep:	
   238                           ; 1 bytes @ 0x0
   239                           
   240  0070                     ??_bit_sep:	
   241                           ; 1 bytes @ 0x0
   242                           
   243  0070                     ?_LCD_Char:	
   244                           ; 1 bytes @ 0x0
   245                           
   246                           
   247                           ; 1 bytes @ 0x0
   248  0070                     	ds	3
   249  0073                     bit_sep@nibble:	
   250                           
   251                           ; 1 bytes @ 0x3
   252  0073                     	ds	1
   253  0074                     ??_command:	
   254  0074                     ??_LCD_Char:	
   255                           ; 1 bytes @ 0x4
   256                           
   257                           
   258                           ; 1 bytes @ 0x4
   259  0074                     	ds	2
   260  0076                     command@cmd:	
   261  0076                     LCD_Char@data:	
   262                           ; 1 bytes @ 0x6
   263                           
   264                           
   265                           ; 1 bytes @ 0x6
   266  0076                     	ds	1
   267  0077                     ??_LCD_Init:	
   268  0077                     ??_LCD_string:	
   269                           ; 1 bytes @ 0x7
   270                           
   271                           
   272                           ; 1 bytes @ 0x7
   273  0077                     	ds	1
   274  0078                     LCD_string@dat:	
   275                           
   276                           ; 1 bytes @ 0x8
   277  0078                     	ds	1
   278  0079                     ??_main:	
   279                           
   280                           ; 1 bytes @ 0x9
   281  0079                     	ds	1
   282                           
   283                           	psect	maintext
   284  0710                     __pmaintext:	
   285 ;;
   286 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   287 ;;
   288 ;; *************** function _main *****************
   289 ;; Defined at:
   290 ;;		line 29 in file "4BIT_LCD_DISPLAY_UNIVERSAL.c"
   291 ;; Parameters:    Size  Location     Type
   292 ;;		None
   293 ;; Auto vars:     Size  Location     Type
   294 ;;		None
   295 ;; Return value:  Size  Location     Type
   296 ;;                  1    wreg      void 
   297 ;; Registers used:
   298 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   299 ;; Tracked objects:
   300 ;;		On entry : B00/0
   301 ;;		On exit  : 0/0
   302 ;;		Unchanged: 0/0
   303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   304 ;;      Params:         0       0       0       0       0
   305 ;;      Locals:         0       0       0       0       0
   306 ;;      Temps:          1       0       0       0       0
   307 ;;      Totals:         1       0       0       0       0
   308 ;;Total ram usage:        1 bytes
   309 ;; Hardware stack levels required when called:    3
   310 ;; This function calls:
   311 ;;		_LCD_Init
   312 ;;		_LCD_string
   313 ;;		_command
   314 ;; This function is called by:
   315 ;;		Startup code after reset
   316 ;; This function uses a non-reentrant model
   317 ;;
   318                           
   319                           
   320                           ;psect for function _main
   321  0710                     _main:	
   322  0710                     l716:	
   323                           ;incstack = 0
   324                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   325                           
   326  0710  1683               	bsf	3,5	;RP0=1, select bank1
   327  0711  1303               	bcf	3,6	;RP1=0, select bank1
   328  0712  1007               	bcf	7,0	;volatile
   329  0713  1087               	bcf	7,1	;volatile
   330  0714                     l718:	
   331  0714  300F               	movlw	15
   332  0715  00F9               	movwf	??_main
   333  0716  0879               	movf	??_main,w
   334  0717  0588               	andwf	8,f	;volatile
   335  0718                     l720:	
   336  0718  120A  118A  26EE  120A  118A  	fcall	_LCD_Init
   337  071D                     l722:	
   338  071D  30C0               	movlw	192
   339  071E  120A  118A  2739  120A  118A  	fcall	_command
   340  0723                     l724:	
   341  0723  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   342  0724  120A  118A  26CF  120A  118A  	fcall	_LCD_string
   343  0729                     l726:	
   344  0729  3080               	movlw	128
   345  072A  120A  118A  2739  120A  118A  	fcall	_command
   346  072F                     l728:	
   347  072F  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   348  0730  120A  118A  26CF  120A  118A  	fcall	_LCD_string
   349  0735                     l25:	
   350  0735                     l26:	
   351  0735  2F35               	goto	l25
   352  0736  120A  118A  2800   	ljmp	start
   353  0739                     __end_of_main:	
   354                           
   355                           	psect	text1
   356  06CF                     __ptext1:	
   357 ;; *************** function _LCD_string *****************
   358 ;; Defined at:
   359 ;;		line 94 in file "4BIT_LCD_DISPLAY_UNIVERSAL.c"
   360 ;; Parameters:    Size  Location     Type
   361 ;;  dat             1    wreg     PTR unsigned char 
   362 ;;		 -> STR_2(10), STR_1(8), 
   363 ;; Auto vars:     Size  Location     Type
   364 ;;  dat             1    8[COMMON] PTR unsigned char 
   365 ;;		 -> STR_2(10), STR_1(8), 
   366 ;; Return value:  Size  Location     Type
   367 ;;                  1    wreg      void 
   368 ;; Registers used:
   369 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   370 ;; Tracked objects:
   371 ;;		On entry : 0/0
   372 ;;		On exit  : 0/0
   373 ;;		Unchanged: 0/0
   374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   375 ;;      Params:         0       0       0       0       0
   376 ;;      Locals:         1       0       0       0       0
   377 ;;      Temps:          1       0       0       0       0
   378 ;;      Totals:         2       0       0       0       0
   379 ;;Total ram usage:        2 bytes
   380 ;; Hardware stack levels used:    1
   381 ;; Hardware stack levels required when called:    2
   382 ;; This function calls:
   383 ;;		_LCD_Char
   384 ;; This function is called by:
   385 ;;		_main
   386 ;; This function uses a non-reentrant model
   387 ;;
   388                           
   389                           
   390                           ;psect for function _LCD_string
   391  06CF                     _LCD_string:	
   392                           
   393                           ;incstack = 0
   394                           ; Regs used in _LCD_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   395                           ;LCD_string@dat stored from wreg
   396  06CF  00F8               	movwf	LCD_string@dat
   397  06D0                     l708:	
   398  06D0  2EE1               	goto	l714
   399  06D1                     l710:	
   400  06D1  0878               	movf	LCD_string@dat,w
   401  06D2  0084               	movwf	4
   402  06D3  120A  118A  2003  120A  118A  	fcall	stringdir
   403  06D8  120A  118A  2771  120A  118A  	fcall	_LCD_Char
   404  06DD                     l712:	
   405  06DD  3001               	movlw	1
   406  06DE  00F7               	movwf	??_LCD_string
   407  06DF  0877               	movf	??_LCD_string,w
   408  06E0  07F8               	addwf	LCD_string@dat,f
   409  06E1                     l714:	
   410  06E1  0878               	movf	LCD_string@dat,w
   411  06E2  0084               	movwf	4
   412  06E3  120A  118A  2003  120A  118A  	fcall	stringdir
   413  06E8  3A00               	xorlw	0
   414  06E9  1D03               	skipz
   415  06EA  2EEC               	goto	u101
   416  06EB  2EED               	goto	u100
   417  06EC                     u101:	
   418  06EC  2ED1               	goto	l710
   419  06ED                     u100:	
   420  06ED                     l46:	
   421  06ED  0008               	return
   422  06EE                     __end_of_LCD_string:	
   423                           
   424                           	psect	text2
   425  0771                     __ptext2:	
   426 ;; *************** function _LCD_Char *****************
   427 ;; Defined at:
   428 ;;		line 80 in file "4BIT_LCD_DISPLAY_UNIVERSAL.c"
   429 ;; Parameters:    Size  Location     Type
   430 ;;  data            1    wreg     unsigned char 
   431 ;; Auto vars:     Size  Location     Type
   432 ;;  data            1    6[COMMON] unsigned char 
   433 ;; Return value:  Size  Location     Type
   434 ;;                  1    wreg      void 
   435 ;; Registers used:
   436 ;;		wreg, status,2, status,0, pclath, cstack
   437 ;; Tracked objects:
   438 ;;		On entry : 0/0
   439 ;;		On exit  : 0/0
   440 ;;		Unchanged: 0/0
   441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   442 ;;      Params:         0       0       0       0       0
   443 ;;      Locals:         1       0       0       0       0
   444 ;;      Temps:          2       0       0       0       0
   445 ;;      Totals:         3       0       0       0       0
   446 ;;Total ram usage:        3 bytes
   447 ;; Hardware stack levels used:    1
   448 ;; Hardware stack levels required when called:    1
   449 ;; This function calls:
   450 ;;		_bit_sep
   451 ;; This function is called by:
   452 ;;		_LCD_string
   453 ;; This function uses a non-reentrant model
   454 ;;
   455                           
   456                           
   457                           ;psect for function _LCD_Char
   458  0771                     _LCD_Char:	
   459                           
   460                           ;incstack = 0
   461                           ; Regs used in _LCD_Char: [wreg+status,2+status,0+pclath+cstack]
   462                           ;LCD_Char@data stored from wreg
   463  0771  00F6               	movwf	LCD_Char@data
   464  0772                     l658:	
   465  0772  0876               	movf	LCD_Char@data,w
   466  0773  00F4               	movwf	??_LCD_Char
   467  0774  3004               	movlw	4
   468  0775                     u85:	
   469  0775  1003               	clrc
   470  0776  0CF4               	rrf	??_LCD_Char,f
   471  0777  3EFF               	addlw	-1
   472  0778  1D03               	skipz
   473  0779  2F75               	goto	u85
   474  077A  0874               	movf	??_LCD_Char,w
   475  077B  390F               	andlw	15
   476  077C  120A  118A  27A9  120A  118A  	fcall	_bit_sep
   477  0781                     l660:	
   478  0781  1283               	bcf	3,5	;RP0=0, select bank0
   479  0782  1303               	bcf	3,6	;RP1=0, select bank0
   480  0783  1407               	bsf	7,0	;volatile
   481  0784                     l662:	
   482  0784  1487               	bsf	7,1	;volatile
   483  0785                     l664:	
   484  0785  3041               	movlw	65
   485  0786  00F5               	movwf	??_LCD_Char+1
   486  0787  30EE               	movlw	238
   487  0788  00F4               	movwf	??_LCD_Char
   488  0789                     u117:	
   489  0789  0BF4               	decfsz	??_LCD_Char,f
   490  078A  2F89               	goto	u117
   491  078B  0BF5               	decfsz	??_LCD_Char+1,f
   492  078C  2F89               	goto	u117
   493  078D  0000               	nop
   494  078E                     l666:	
   495  078E  1283               	bcf	3,5	;RP0=0, select bank0
   496  078F  1303               	bcf	3,6	;RP1=0, select bank0
   497  0790  1087               	bcf	7,1	;volatile
   498  0791                     l668:	
   499  0791  0876               	movf	LCD_Char@data,w
   500  0792  390F               	andlw	15
   501  0793  120A  118A  27A9  120A  118A  	fcall	_bit_sep
   502  0798                     l670:	
   503  0798  1283               	bcf	3,5	;RP0=0, select bank0
   504  0799  1303               	bcf	3,6	;RP1=0, select bank0
   505  079A  1407               	bsf	7,0	;volatile
   506  079B                     l672:	
   507  079B  1487               	bsf	7,1	;volatile
   508  079C  3041               	movlw	65
   509  079D  00F5               	movwf	??_LCD_Char+1
   510  079E  30EE               	movlw	238
   511  079F  00F4               	movwf	??_LCD_Char
   512  07A0                     u127:	
   513  07A0  0BF4               	decfsz	??_LCD_Char,f
   514  07A1  2FA0               	goto	u127
   515  07A2  0BF5               	decfsz	??_LCD_Char+1,f
   516  07A3  2FA0               	goto	u127
   517  07A4  0000               	nop
   518  07A5                     l674:	
   519  07A5  1283               	bcf	3,5	;RP0=0, select bank0
   520  07A6  1303               	bcf	3,6	;RP1=0, select bank0
   521  07A7  1087               	bcf	7,1	;volatile
   522  07A8                     l40:	
   523  07A8  0008               	return
   524  07A9                     __end_of_LCD_Char:	
   525                           
   526                           	psect	text3
   527  06EE                     __ptext3:	
   528 ;; *************** function _LCD_Init *****************
   529 ;; Defined at:
   530 ;;		line 47 in file "4BIT_LCD_DISPLAY_UNIVERSAL.c"
   531 ;; Parameters:    Size  Location     Type
   532 ;;		None
   533 ;; Auto vars:     Size  Location     Type
   534 ;;		None
   535 ;; Return value:  Size  Location     Type
   536 ;;                  1    wreg      void 
   537 ;; Registers used:
   538 ;;		wreg, status,2, status,0, pclath, cstack
   539 ;; Tracked objects:
   540 ;;		On entry : 0/0
   541 ;;		On exit  : 0/0
   542 ;;		Unchanged: 0/0
   543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   544 ;;      Params:         0       0       0       0       0
   545 ;;      Locals:         0       0       0       0       0
   546 ;;      Temps:          2       0       0       0       0
   547 ;;      Totals:         2       0       0       0       0
   548 ;;Total ram usage:        2 bytes
   549 ;; Hardware stack levels used:    1
   550 ;; Hardware stack levels required when called:    2
   551 ;; This function calls:
   552 ;;		_command
   553 ;; This function is called by:
   554 ;;		_main
   555 ;; This function uses a non-reentrant model
   556 ;;
   557                           
   558                           
   559                           ;psect for function _LCD_Init
   560  06EE                     _LCD_Init:	
   561  06EE                     l676:	
   562                           ;incstack = 0
   563                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
   564                           
   565  06EE  3041               	movlw	65
   566  06EF  00F8               	movwf	??_LCD_Init+1
   567  06F0  30EE               	movlw	238
   568  06F1  00F7               	movwf	??_LCD_Init
   569  06F2                     u137:	
   570  06F2  0BF7               	decfsz	??_LCD_Init,f
   571  06F3  2EF2               	goto	u137
   572  06F4  0BF8               	decfsz	??_LCD_Init+1,f
   573  06F5  2EF2               	goto	u137
   574  06F6  0000               	nop
   575  06F7                     l678:	
   576  06F7  3028               	movlw	40
   577  06F8  120A  118A  2739  120A  118A  	fcall	_command
   578  06FD                     l680:	
   579  06FD  300C               	movlw	12
   580  06FE  120A  118A  2739  120A  118A  	fcall	_command
   581  0703                     l682:	
   582  0703  3006               	movlw	6
   583  0704  120A  118A  2739  120A  118A  	fcall	_command
   584  0709                     l684:	
   585  0709  3001               	movlw	1
   586  070A  120A  118A  2739  120A  118A  	fcall	_command
   587  070F                     l31:	
   588  070F  0008               	return
   589  0710                     __end_of_LCD_Init:	
   590                           
   591                           	psect	text4
   592  0739                     __ptext4:	
   593 ;; *************** function _command *****************
   594 ;; Defined at:
   595 ;;		line 65 in file "4BIT_LCD_DISPLAY_UNIVERSAL.c"
   596 ;; Parameters:    Size  Location     Type
   597 ;;  cmd             1    wreg     unsigned char 
   598 ;; Auto vars:     Size  Location     Type
   599 ;;  cmd             1    6[COMMON] unsigned char 
   600 ;; Return value:  Size  Location     Type
   601 ;;                  1    wreg      void 
   602 ;; Registers used:
   603 ;;		wreg, status,2, status,0, pclath, cstack
   604 ;; Tracked objects:
   605 ;;		On entry : 0/0
   606 ;;		On exit  : 0/0
   607 ;;		Unchanged: 0/0
   608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   609 ;;      Params:         0       0       0       0       0
   610 ;;      Locals:         1       0       0       0       0
   611 ;;      Temps:          2       0       0       0       0
   612 ;;      Totals:         3       0       0       0       0
   613 ;;Total ram usage:        3 bytes
   614 ;; Hardware stack levels used:    1
   615 ;; Hardware stack levels required when called:    1
   616 ;; This function calls:
   617 ;;		_bit_sep
   618 ;; This function is called by:
   619 ;;		_main
   620 ;;		_LCD_Init
   621 ;; This function uses a non-reentrant model
   622 ;;
   623                           
   624                           
   625                           ;psect for function _command
   626  0739                     _command:	
   627                           
   628                           ;incstack = 0
   629                           ; Regs used in _command: [wreg+status,2+status,0+pclath+cstack]
   630                           ;command@cmd stored from wreg
   631  0739  00F6               	movwf	command@cmd
   632  073A                     l640:	
   633  073A  0876               	movf	command@cmd,w
   634  073B  00F4               	movwf	??_command
   635  073C  3004               	movlw	4
   636  073D                     u75:	
   637  073D  1003               	clrc
   638  073E  0CF4               	rrf	??_command,f
   639  073F  3EFF               	addlw	-1
   640  0740  1D03               	skipz
   641  0741  2F3D               	goto	u75
   642  0742  0874               	movf	??_command,w
   643  0743  390F               	andlw	15
   644  0744  120A  118A  27A9  120A  118A  	fcall	_bit_sep
   645  0749                     l642:	
   646  0749  1283               	bcf	3,5	;RP0=0, select bank0
   647  074A  1303               	bcf	3,6	;RP1=0, select bank0
   648  074B  1007               	bcf	7,0	;volatile
   649  074C                     l644:	
   650  074C  1487               	bsf	7,1	;volatile
   651  074D                     l646:	
   652  074D  3041               	movlw	65
   653  074E  00F5               	movwf	??_command+1
   654  074F  30EE               	movlw	238
   655  0750  00F4               	movwf	??_command
   656  0751                     u147:	
   657  0751  0BF4               	decfsz	??_command,f
   658  0752  2F51               	goto	u147
   659  0753  0BF5               	decfsz	??_command+1,f
   660  0754  2F51               	goto	u147
   661  0755  0000               	nop
   662  0756                     l648:	
   663  0756  1283               	bcf	3,5	;RP0=0, select bank0
   664  0757  1303               	bcf	3,6	;RP1=0, select bank0
   665  0758  1087               	bcf	7,1	;volatile
   666  0759                     l650:	
   667  0759  0876               	movf	command@cmd,w
   668  075A  390F               	andlw	15
   669  075B  120A  118A  27A9  120A  118A  	fcall	_bit_sep
   670  0760                     l652:	
   671  0760  1283               	bcf	3,5	;RP0=0, select bank0
   672  0761  1303               	bcf	3,6	;RP1=0, select bank0
   673  0762  1007               	bcf	7,0	;volatile
   674  0763                     l654:	
   675  0763  1487               	bsf	7,1	;volatile
   676  0764  3041               	movlw	65
   677  0765  00F5               	movwf	??_command+1
   678  0766  30EE               	movlw	238
   679  0767  00F4               	movwf	??_command
   680  0768                     u157:	
   681  0768  0BF4               	decfsz	??_command,f
   682  0769  2F68               	goto	u157
   683  076A  0BF5               	decfsz	??_command+1,f
   684  076B  2F68               	goto	u157
   685  076C  0000               	nop
   686  076D                     l656:	
   687  076D  1283               	bcf	3,5	;RP0=0, select bank0
   688  076E  1303               	bcf	3,6	;RP1=0, select bank0
   689  076F  1087               	bcf	7,1	;volatile
   690  0770                     l37:	
   691  0770  0008               	return
   692  0771                     __end_of_command:	
   693                           
   694                           	psect	text5
   695  07A9                     __ptext5:	
   696 ;; *************** function _bit_sep *****************
   697 ;; Defined at:
   698 ;;		line 56 in file "4BIT_LCD_DISPLAY_UNIVERSAL.c"
   699 ;; Parameters:    Size  Location     Type
   700 ;;  nibble          1    wreg     unsigned char 
   701 ;; Auto vars:     Size  Location     Type
   702 ;;  nibble          1    3[COMMON] unsigned char 
   703 ;; Return value:  Size  Location     Type
   704 ;;                  1    wreg      void 
   705 ;; Registers used:
   706 ;;		wreg, status,2, status,0
   707 ;; Tracked objects:
   708 ;;		On entry : 0/0
   709 ;;		On exit  : 0/0
   710 ;;		Unchanged: 0/0
   711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   712 ;;      Params:         0       0       0       0       0
   713 ;;      Locals:         1       0       0       0       0
   714 ;;      Temps:          3       0       0       0       0
   715 ;;      Totals:         4       0       0       0       0
   716 ;;Total ram usage:        4 bytes
   717 ;; Hardware stack levels used:    1
   718 ;; This function calls:
   719 ;;		Nothing
   720 ;; This function is called by:
   721 ;;		_command
   722 ;;		_LCD_Char
   723 ;; This function uses a non-reentrant model
   724 ;;
   725                           
   726                           
   727                           ;psect for function _bit_sep
   728  07A9                     _bit_sep:	
   729                           
   730                           ;incstack = 0
   731                           ; Regs used in _bit_sep: [wreg+status,2+status,0]
   732                           ;bit_sep@nibble stored from wreg
   733  07A9  00F3               	movwf	bit_sep@nibble
   734  07AA                     l638:	
   735  07AA  300F               	movlw	15
   736  07AB  00F0               	movwf	??_bit_sep
   737  07AC  0870               	movf	??_bit_sep,w
   738  07AD  1283               	bcf	3,5	;RP0=0, select bank0
   739  07AE  1303               	bcf	3,6	;RP1=0, select bank0
   740  07AF  0588               	andwf	8,f	;volatile
   741  07B0  0873               	movf	bit_sep@nibble,w
   742  07B1  3901               	andlw	1
   743  07B2  00F0               	movwf	??_bit_sep
   744  07B3  3003               	movlw	3
   745  07B4                     u15:	
   746  07B4  1003               	clrc
   747  07B5  0DF0               	rlf	??_bit_sep,f
   748  07B6  3EFF               	addlw	-1
   749  07B7  1D03               	skipz
   750  07B8  2FB4               	goto	u15
   751  07B9  1003               	clrc
   752  07BA  0D70               	rlf	??_bit_sep,w
   753  07BB  00F1               	movwf	??_bit_sep+1
   754  07BC  0871               	movf	??_bit_sep+1,w
   755  07BD  0488               	iorwf	8,f	;volatile
   756  07BE  0873               	movf	bit_sep@nibble,w
   757  07BF  00F0               	movwf	??_bit_sep
   758  07C0  1003               	clrc
   759  07C1  0C70               	rrf	??_bit_sep,w
   760  07C2  3901               	andlw	1
   761  07C3  00F1               	movwf	??_bit_sep+1
   762  07C4  3004               	movlw	4
   763  07C5                     u25:	
   764  07C5  1003               	clrc
   765  07C6  0DF1               	rlf	??_bit_sep+1,f
   766  07C7  3EFF               	addlw	-1
   767  07C8  1D03               	skipz
   768  07C9  2FC5               	goto	u25
   769  07CA  1003               	clrc
   770  07CB  0D71               	rlf	??_bit_sep+1,w
   771  07CC  00F2               	movwf	??_bit_sep+2
   772  07CD  0872               	movf	??_bit_sep+2,w
   773  07CE  0488               	iorwf	8,f	;volatile
   774  07CF  0873               	movf	bit_sep@nibble,w
   775  07D0  00F0               	movwf	??_bit_sep
   776  07D1  3002               	movlw	2
   777  07D2                     u35:	
   778  07D2  1003               	clrc
   779  07D3  0CF0               	rrf	??_bit_sep,f
   780  07D4  3EFF               	addlw	-1
   781  07D5  1D03               	skipz
   782  07D6  2FD2               	goto	u35
   783  07D7  0870               	movf	??_bit_sep,w
   784  07D8  3901               	andlw	1
   785  07D9  00F1               	movwf	??_bit_sep+1
   786  07DA  3005               	movlw	5
   787  07DB                     u45:	
   788  07DB  1003               	clrc
   789  07DC  0DF1               	rlf	??_bit_sep+1,f
   790  07DD  3EFF               	addlw	-1
   791  07DE  1D03               	skipz
   792  07DF  2FDB               	goto	u45
   793  07E0  1003               	clrc
   794  07E1  0D71               	rlf	??_bit_sep+1,w
   795  07E2  00F2               	movwf	??_bit_sep+2
   796  07E3  0872               	movf	??_bit_sep+2,w
   797  07E4  0488               	iorwf	8,f	;volatile
   798  07E5  0873               	movf	bit_sep@nibble,w
   799  07E6  00F0               	movwf	??_bit_sep
   800  07E7  3003               	movlw	3
   801  07E8                     u55:	
   802  07E8  1003               	clrc
   803  07E9  0CF0               	rrf	??_bit_sep,f
   804  07EA  3EFF               	addlw	-1
   805  07EB  1D03               	skipz
   806  07EC  2FE8               	goto	u55
   807  07ED  0870               	movf	??_bit_sep,w
   808  07EE  3901               	andlw	1
   809  07EF  00F1               	movwf	??_bit_sep+1
   810  07F0  3006               	movlw	6
   811  07F1                     u65:	
   812  07F1  1003               	clrc
   813  07F2  0DF1               	rlf	??_bit_sep+1,f
   814  07F3  3EFF               	addlw	-1
   815  07F4  1D03               	skipz
   816  07F5  2FF1               	goto	u65
   817  07F6  1003               	clrc
   818  07F7  0D71               	rlf	??_bit_sep+1,w
   819  07F8  00F2               	movwf	??_bit_sep+2
   820  07F9  0872               	movf	??_bit_sep+2,w
   821  07FA  0488               	iorwf	8,f	;volatile
   822  07FB                     l34:	
   823  07FB  0008               	return
   824  07FC                     __end_of_bit_sep:	
   825  007E                     btemp	set	126	;btemp
   826  007E                     wtemp0	set	126


Data Sizes:
    Strings     18
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      10
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_string@dat	PTR unsigned char  size(1) Largest target is 10
		 -> STR_2(CODE[10]), STR_1(CODE[8]), 


Critical Paths under _main in COMMON

    _main->_LCD_Init
    _main->_LCD_string
    _LCD_string->_LCD_Char
    _LCD_Char->_bit_sep
    _LCD_Init->_command
    _command->_bit_sep

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     381
                                              9 COMMON     1     1      0
                           _LCD_Init
                         _LCD_string
                            _command
 ---------------------------------------------------------------------------------
 (1) _LCD_string                                           2     2      0     201
                                              7 COMMON     2     2      0
                           _LCD_Char
 ---------------------------------------------------------------------------------
 (2) _LCD_Char                                             3     3      0      90
                                              4 COMMON     3     3      0
                            _bit_sep
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0      90
                                              7 COMMON     2     2      0
                            _command
 ---------------------------------------------------------------------------------
 (1) _command                                              3     3      0      90
                                              4 COMMON     3     3      0
                            _bit_sep
 ---------------------------------------------------------------------------------
 (2) _bit_sep                                              4     4      0      60
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _command
       _bit_sep
   _LCD_string
     _LCD_Char
       _bit_sep
   _command
     _bit_sep

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Jun 21 12:22:50 2023

                      pc 0002              __CFG_CP$OFF 0000                       l31 070F  
                     l40 07A8                       l25 0735                       l34 07FB  
                     l26 0735                       l37 0770                       l46 06ED  
                     u15 07B4                       u25 07C5                       u35 07D2  
                     u45 07DB                       u55 07E8                       u65 07F1  
                     u75 073D                       u85 0775                       fsr 0004  
                    l710 06D1                      l640 073A                      l712 06DD  
                    l720 0718                      l650 0759                      l642 0749  
                    l714 06E1                      l722 071D                      l652 0760  
                    l644 074C                      l660 0781                      l708 06D0  
                    l724 0723                      l716 0710                      l638 07AA  
                    l654 0763                      l646 074D                      l670 0798  
                    l662 0784                      l726 0729                      l718 0714  
                    l656 076D                      l648 0756                      l680 06FD  
                    l672 079B                      l664 0785                      l728 072F  
                    l682 0703                      l674 07A5                      l666 078E  
                    l658 0772                      l684 0709                      l676 06EE  
                    l668 0791                      l678 06F7                      _RC0 0038  
                    _RC1 0039                      u100 06ED                      u101 06EC  
                    u117 0789                      u127 07A0                      u137 06F2  
                    u147 0751                      u157 0768             __CFG_CPD$OFF 0000  
                    fsr0 0004             __CFG_FOSC$HS 0000              ?_LCD_string 0070  
           __CFG_LVP$OFF 0000                     STR_1 0013                     STR_2 0009  
           __CFG_WRT$OFF 0000                     _main 0710                     btemp 007E  
                   start 0000         __end_of_LCD_Char 07A9         __end_of_LCD_Init 0710  
           LCD_Char@data 0076                    ?_main 0070            __CFG_WDTE$OFF 0000  
                  _PORTD 0008                    _TRISD 0088          __end_of_bit_sep 07FC  
        __end_of_command 0771           __CFG_BOREN$OFF 0000                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 07FC  
    __size_of_LCD_string 001F             __end_of_main 0739                   ??_main 0079  
                 _TRISC0 0438                   _TRISC1 0439           __CFG_PWRTE$OFF 0000  
              ??_bit_sep 0070                ??_command 0074                ?_LCD_Char 0070  
__end_of__initialization 07FC                ?_LCD_Init 0070           __pcstackCOMMON 0070  
           ??_LCD_string 0077               ??_LCD_Char 0074               ??_LCD_Init 0077  
             __pmaintext 0710       __end_of_LCD_string 06EE               __stringtab 0003  
                _bit_sep 07A9                  __ptext1 06CF                  __ptext2 0771  
                __ptext3 06EE                  __ptext4 0739                  __ptext5 07A9  
                _command 0739     end_of_initialization 07FC               command@cmd 0076  
      __size_of_LCD_Char 0038        __size_of_LCD_Init 0022      start_initialization 07FC  
              ___latbits 0002            LCD_string@dat 0078                __pstrings 0003  
               ?_bit_sep 0070                 ?_command 0070                 _LCD_Char 0771  
               _LCD_Init 06EE            bit_sep@nibble 0073              __stringbase 0008  
     __end_of__stringtab 0009         __size_of_bit_sep 0053         __size_of_command 0038  
          __size_of_main 0029               _LCD_string 06CF                stringcode 0003  
               stringdir 0003                 stringtab 0003  
